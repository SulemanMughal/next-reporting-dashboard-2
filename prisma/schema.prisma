generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}



model Quiz{
  id   String  @id @default(uuid())
  title String @unique
  startAt DateTime  @default(now())
  endAt DateTime  @default(now())
  questions Question[]
  teams Team[]

  // @@map("quizes")
}

model Config{
  id    String  @id @default(uuid())
  key   String @unique
  value String
  is_active Boolean @default(true)
  createdAt DateTime  @default(now())

  // @@map("configs")
}

// model AttackLogs{
//   id    String  @id @default(uuid())
//   createdAt          DateTime  @default(now()) 
//   team_no String
//   script_name String
//   job_number Int 
// }

model Team {
  id   String  @id @default(uuid())
  name String  @unique
  quiz Quiz? @relation(fields: [quizId], references: [id])
  quizId String?
  answers Answer[]
  users  User[]
  infras  TeamInfra[]
  createdAt DateTime  @default(now())

  team_octet Int @default(0)
  ImageName String @default("")

  // @@map("teams")
}


model TeamInfra{
  id    String  @id @default(uuid())
  hostname String @default("")
  ip_address String
  username String @default("")
  password String @default("")
  machine_type String @default("Linux")
  team Team? @relation(fields: [teamId], references: [id])
  teamId String?
  createdAt DateTime  @default(now())

//   @@map("team_infras")
}

model User {
  id   String  @id @default(uuid())
  email String  @unique
  name  String?
  role  String?  @default("user")

  password  String
  answers Answer[] 
  team Team? @relation(fields: [teamId], references: [id])
  teamId String?
  country String? @default("")
  joinedDate DateTime  @default(now())
  lastLogin DateTime  @default(now())
  active Boolean @default(true)

  // @@map("users")
  
}

model AttackScript{
  id    String  @id @default(uuid())
  name String 
  script_category String
  desc String @default("")
  addedAt DateTime  @default(now())

  // @@map("attack_scripts")
}


model Wave{
  id    String  @id @default(uuid())
  name String 
  addedAt DateTime  @default(now())
  start_time String @default("")
  end_time String @default("")
  is_active Boolean @default(false)
  scenarios Scenario[]
  // status String  @default("Publish")            // Draft, Publish
  // category String @default("Security Operations") 
  // desc   String @default("")
  // difficulty String @default("Easy")
  // tags String @default("")
  // files File[]
  // os_type String? @default("Linux")
  // first_blood String? @default("")
  // first_blood_points Int @default(0)

  // is_patch Boolean @default(false)

  // @@map("waves")
}


model Scenario{
  id    String    @id @default(uuid())
  name String 
  addedAt DateTime  @default(now())
  questions Question[]
  status String  @default("Publish")            // Draft, Publish
  category String @default("Security Operations") 
  desc   String @default("")
  difficulty String @default("Easy")
  tags String @default("")
  files File[]
  os_type String? @default("Linux")
  first_blood String? @default("")
  first_blood_points Int @default(0)

  is_patch Boolean @default(false)

  wave Wave? @relation(fields: [waveId], references: [id])
  waveId String? 

  @@unique([id, waveId]) 

  // @@map("scenarios")
}



model File {
  id       String      @id @default(uuid())
  filename String @default("")
  filepath String @default("")  // This could be a relative/absolute path or a URL
  password String @default("")
  scenario Scenario? @relation(fields: [scenarioId], references: [id])
  scenarioId String?
  createdAt DateTime  @default(now())

  // @@map("files")
}


model Question{
  id   String  @id @default(uuid())
  title String @default("")
  Description String @default("")
  points Int @default(50) 
  // option_1 String @default("")
  // option_2 String @default("")
  // option_3 String @default("")
  // option_4 String @default("")
  // option_5 String @default("")
  // option_6 String @default("")
  original_answer String @default("")
  // question_index Int @default(1)
  // type String @default("1")
  // status String  @default("Publish")    // Draft, Publish
  quiz Quiz? @relation(fields: [quizId], references: [id])
  quizId String?
  answers Answer[]
  scenario Scenario? @relation(fields: [scenarioId], references: [id])
  scenarioId String?
  createdAt DateTime  @default(now()) 

  // @@map("questions")
  
}


model Answer{
  id    String  @id @default(uuid())
  submitAnswer String @default("")
  obtainedPoints Int @default(0)
  submissionStatus Boolean @default(false)
  submittedAt DateTime  @default(now())
  checkStatus Boolean @default(true)
  question Question? @relation(fields: [questionId], references: [id])
  questionId String?
  team Team? @relation(fields: [teamId], references: [id])
  teamId String?
  user User? @relation(fields: [userId], references: [id])
  userId String?

  // @@map("answers")
}

model LogEntry{
  id    String  @id @default(uuid())
  action_name String @default("")
  createdAt     DateTime  @default(now())
  action_by     String  @default("")
  message String @default("")
  level String @default("info")

  // @@map("log_enteries")
}

