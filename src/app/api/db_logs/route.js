// read logs from database generated by attack scripts @kali-attacker-machine

import  {selectRows , selectRowsPaginated , total_records } from "@/app/lib/read_db.js"



import encrypt from "@/app/lib/encrypt"
import decrypt from "@/app/lib/decrypt"

export const dynamic = "force-dynamic"


export async function GET(request ,{ params }){
    try{
        // console.debug({params})
        // const {page = "" } = params;
        // console.debug({page})
        // const logs = await selectRows()
        // const body = await request.json()
        // const query = request.query;
        // const page = params.page;
        // console.debug(id)
        // console.debug(body)
        // console.debug(request.nextUrl.searchParams.get("page"))
        
        // console.debug(page)

        // console.debug(logs) 
        // totoal records
        // console.debug(total_results?.[0]?.[0] || 0)


        
        const page = request.nextUrl.searchParams.get("page") || 1;
        const logs = await selectRowsPaginated(page)
        let nextPage = parseInt(page) + 1;
        let prevPage = parseInt(page) - 1;
        let currentPage = parseInt(page);
        if(prevPage < 1){
            prevPage = 0;
        }
        let total_results = await total_records()

        let total_pages  = Math.ceil((total_results?.[0]?.[0] || 0) / 30)
        // console.debug(total_pages)
        let startIndex = ((currentPage - 1) * 30) + 1;
        let endIndex = currentPage * 30;
        if(currentPage === total_pages){
            endIndex = ((currentPage * 30 ) - 30) + (logs.length);
        }

        

        

        const encryptedData = encrypt(
            {
                status : true, 
                prevPage : prevPage , 
                total_results : (total_results?.[0]?.[0] || 0) ,  
                total_pages : total_pages ,  
                nextPage:nextPage, 
                currentPage : currentPage ,   
                startIndex : startIndex ,
                endIndex : endIndex ,
                logs
            })
        return new Response(JSON.stringify({ encryptedData }))
        // return new Response(JSON.stringify({ status : true, logs }))

        // return new Response(JSON.stringify(logs))
    } catch(error){
        console.debug(error)
        const encryptedData = encrypt({status : false})
        return new Response(JSON.stringify({ encryptedData }))
        // return new Response(JSON.stringify({status : false}))
        
    }

}

